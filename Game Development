from random import randint
import time
import pgzrun
from pgzero.builtins import Actor, clock, keyboard

WIDTH = 800
HEIGHT = 600
CENTER_X = WIDTH / 2
CENTER_Y = HEIGHT / 2

game_over = False
finalized = False
garden_happy = True
fangflower_collision = False
rain_active = False
cow_stunned = False
stun_end_time = 0

time_elapsed = 0
start_time = time.time()

cow = Actor("cow")
cow.pos = 100, 500

flower_list = []
wilted_list = []
fangflower_list = []
vine_list = []

fangflower_vy_list = []
fangflower_vx_list = []
vine_vy_list = []
vine_vx_list = []


def draw():
    global game_over, time_elapsed, finalized, cow_stunned
    if not game_over:
        screen.clear()
        if rain_active:
            screen.fill((135, 206, 235))
            screen.blit("garden-raining", (0, 0))
        else:
            screen.blit("garden", (0, 0))
        cow.draw()
        for flower in flower_list:
            flower.draw()
        for fangflower in fangflower_list:
            fangflower.draw()
        for vine in vine_list:
            vine.draw()
        time_elapsed = int(time.time() - start_time)
        screen.draw.text("Garden happy for: " + str(time_elapsed) + " seconds",
                         topleft=(10, 10), color="black")
        if rain_active:
            screen.draw.text("RAIN ACTIVE - Flowers protected!",
                             topleft=(10, 40), color="blue")
        if cow_stunned:
            screen.draw.text("COW STUNNED!", midtop=(cow.x, cow.y - 50), color="red")
    else:
        if not finalized:
            cow.draw()
            screen.draw.text("Garden happy for: " + str(time_elapsed) + " seconds",
                             topleft=(10, 10), color="black")
        if not garden_happy:
            screen.draw.text("GARDEN UNHAPPY! GAME OVER!", color="black", topleft=(10, 50))
            finalized = True
        else:
            screen.draw.text("ENEMY ATTACK! GAME OVER!", color="black", topleft=(10, 50))
            finalized = True


def new_flower():
    global flower_list, wilted_list
    flower_new = Actor("flower")
    flower_new.pos = randint(50, WIDTH - 50), randint(150, HEIGHT - 100)
    flower_list.append(flower_new)
    wilted_list.append("happy")


def add_flowers():
    global game_over
    if not game_over:
        new_flower()
        clock.schedule(add_flowers, 4)


def check_wilt_times():
    global wilted_list, game_over, garden_happy, rain_active
    if wilted_list and not rain_active:  # Only check wilting when not raining
        for wilted_since in wilted_list:
            if not wilted_since == "happy":
                time_wilted = int(time.time() - wilted_since)
                if time_wilted > 10:
                    garden_happy = False
                    game_over = True
                    break


def revive_flowers():
    global flower_list, wilted_list
    for i in range(len(flower_list)):
        if flower_list[i].image == "flower-wilt":
            flower_list[i].image = "flower"
            wilted_list[i] = "happy"


def wilt_flower():
    global flower_list, wilted_list, game_over, rain_active
    if not game_over and not rain_active:  # Only wilt flowers when not raining
        if flower_list:
            rand_flower = randint(0, len(flower_list) - 1)
            if flower_list[rand_flower].image == "flower":
                flower_list[rand_flower].image = "flower-wilt"
                wilted_list[rand_flower] = time.time()
        clock.schedule(wilt_flower, 3)


def check_flower_collision():
    global cow, flower_list, wilted_list
    index = 0
    for flower in flower_list:
        if flower.colliderect(cow) and flower.image == "flower-wilt":
            flower.image = "flower"
            cow.image = "cow-water"
            wilted_list[index] = "happy"
            break
        index += 1


def check_fangflower_collision():
    global cow, fangflower_list, game_over
    for fangflower in fangflower_list:
        if fangflower.colliderect(cow):
            cow.image = "zap"
            game_over = True
            break


def check_vine_collision():
    global cow, vine_list, cow_stunned, stun_end_time
    for vine in vine_list:
        if vine.colliderect(cow) and not cow_stunned:
            cow_stunned = True
            stun_end_time = time.time() + 1  # Stun for 1 second
            break
    return False


def velocity():
    random_dir = randint(0, 1)
    random_velocity = randint(2, 3)
    if random_dir == 0:
        return -random_velocity
    else:
        return random_velocity


def vine_velocity():
    return randint(1, 2)  # Slower than fangflowers


def mutate():
    global flower_list, fangflower_list, fangflower_vx_list, fangflower_vy_list, game_over, rain_active, vine_list, vine_vy_list, vine_vx_list
    if not game_over and flower_list:
        num_to_mutate = 2 if rain_active else 1
        for _ in range(min(num_to_mutate, len(flower_list))):
            rand_flower = randint(0, len(flower_list) - 1)
            enemy_type = randint(0, 1)

            if enemy_type == 0:
                fangflower_pos_x = flower_list[rand_flower].x
                fangflower_pos_y = flower_list[rand_flower].y
                del flower_list[rand_flower]
                del wilted_list[rand_flower]
                fangflower = Actor("fangflower")
                fangflower.pos = fangflower_pos_x, fangflower_pos_y
                fangflower_vx = velocity()
                fangflower_vy = velocity()
                fangflower_list.append(fangflower)
                fangflower_vx_list.append(fangflower_vx)
                fangflower_vy_list.append(fangflower_vy)
            else:
                vine_pos_x = flower_list[rand_flower].x
                vine_pos_y = flower_list[rand_flower].y
                del flower_list[rand_flower]
                del wilted_list[rand_flower]
                vine = Actor("vine")
                vine.pos = vine_pos_x, vine_pos_y
                vine_vx = vine_velocity() * (1 if randint(0, 1) else -1)
                vine_vy = vine_velocity() * (1 if randint(0, 1) else -1)
                vine_list.append(vine)
                vine_vx_list.append(vine_vx)
                vine_vy_list.append(vine_vy)

        if rain_active:
            clock.schedule(mutate, 10)
        else:
            clock.schedule(mutate, 20)


def update_fangflowers():
    global fangflower_list, game_over
    if not game_over:
        index = 0
        for fangflower in fangflower_list:
            fangflower_vx = fangflower_vx_list[index]
            fangflower_vy = fangflower_vy_list[index]
            fangflower.x += fangflower_vx
            fangflower.y += fangflower_vy
            if fangflower.left < 0:
                fangflower_vx_list[index] = -fangflower_vx
            if fangflower.right > WIDTH:
                fangflower_vx_list[index] = -fangflower_vx
            if fangflower.top < 150:
                fangflower_vy_list[index] = -fangflower_vy
            if fangflower.bottom > HEIGHT:
                fangflower_vy_list[index] = -fangflower_vy
            index += 1


def update_vines():
    global vine_list, game_over, vine_vy_list, vine_vx_list
    if not game_over:
        index = 0
        for vine in vine_list:
            vine_vx = vine_vx_list[index]
            vine_vy = vine_vy_list[index]
            vine.x += vine_vx
            vine.y += vine_vy
            if vine.left < 0:
                vine_vx_list[index] = -vine_vx
            if vine.right > WIDTH:
                vine_vx_list[index] = -vine_vx
            if vine.top < 150:
                vine_vy_list[index] = -vine_vy
            if vine.bottom > HEIGHT:
                vine_vy_list[index] = -vine_vy
            index += 1


def reset_cow():
    global game_over
    if not game_over:
        cow.image = "cow"


def check_stun():
    global cow_stunned, stun_end_time
    if cow_stunned and time.time() > stun_end_time:
        cow_stunned = False


def start_rain():
    global rain_active
    if not rain_active:
        rain_active = True
        revive_flowers()  # Revive all wilted flowers immediately
        clock.schedule(stop_rain, 5)


def stop_rain():
    global rain_active
    rain_active = False
    # Resume wilting when rain stops
    wilt_flower()


add_flowers()
wilt_flower()
clock.schedule(mutate, 20)


def update():
    global game_over, fangflower_collision, cow_stunned
    if not game_over:
        check_stun()
        fangflower_collision = check_fangflower_collision()
        check_vine_collision()
        check_wilt_times()

        if not cow_stunned:
            if keyboard.space:
                cow.image = "cow-water"
                clock.schedule(reset_cow, 0.5)
                check_flower_collision()
            if keyboard.r and not rain_active:
                start_rain()
            if keyboard.a and cow.x > 0:
                cow.x -= 5
            elif keyboard.d and cow.x < WIDTH:
                cow.x += 5
            elif keyboard.w and cow.y > 150:
                cow.y -= 5
            elif keyboard.s and cow.y < HEIGHT:
                cow.y += 5

        update_fangflowers()
        update_vines()


pgzrun.go()
